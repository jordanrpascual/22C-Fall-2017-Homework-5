//Heap Sort
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
using namespace std;

void printArray(int arr[], int len) {
	for (int i = 0; i < len; i++)
		cout << arr[i] << " ";

	cout << "\n";
}
class MaxHeap {

public:
	int len;
	int *arr;
	MaxHeap(int l, int a[]);
};
MaxHeap::MaxHeap(int l, int a[]) {
	len = l;
	arr = a;
}
void swap(int *i, int *j, int &count) {
	int temp = *i;
	*i = *j;
	*j = temp;
}
MaxHeap heapify(MaxHeap maxheap, int N, int &count) {
	int largest = N;
	int left = 2 * N + 1;
	int right = 2 * N + 2;
	
	count++;
	if (left < maxheap.len && maxheap.arr[left] > maxheap.arr[largest]) {
		largest = left;
	}

	if (right < maxheap.len && maxheap.arr[right] > maxheap.arr[largest]) {
		largest = right;
	}

	if (largest != N) {
		swap(&maxheap.arr[largest], &maxheap.arr[N],count);
		heapify(maxheap, largest, count);
	}

	return maxheap;
}
MaxHeap createHeap(int arr[], int N) {
	MaxHeap maxheap(N, arr);
	int i = (maxheap.len - 2) / 2, ignore;

	while (i >= 0) {
		maxheap = heapify(maxheap, i, ignore);
		i--;
	}

	return maxheap;
}
void heapsort(int arr[], int N, int &count) {
	//creating a heap
	MaxHeap heap = createHeap(arr, N);

	//Repeating the below steps till the size of the heap is 1.
	while (heap.len > 1) {
		//Replacing largest element with the last item of the heap
		swap(&heap.arr[0], &heap.arr[heap.len - 1],count);
		heap.len--;//Reducing the heap size by 1
		heapify(heap, 0, count);

	}
}

void selectionSort(int arr[], int N, int &count) {
	for (int i = 0; i < N; i++) {
		int small = arr[i];
		int pos = i;

		for (int j = i + 1; j < N; j++) 
		{
			count++;
			if (arr[j] < small) {
				small = arr[j];
				pos = j;
			}
		}

		int temp = arr[pos];
		arr[pos] = arr[i];
		arr[i] = temp;
		
//		cout << "After pass " << i << "  : ";
//		printArray(arr, N);
	}
}




int main() {
	const int arrSize = 1000;
	int arrHeap[arrSize] = { 0 }, arrSelect[arrSize] = { 0 };
	int len = sizeof(arrHeap) / sizeof(int), selectCount=0, heapCount = 0;

	for (int i = 0; i < arrSize; i++)
	{
		if (((rand() % 99) + 1) % 2 == 0)
		{
			arrHeap[i] = (rand() % 99) + 1;
			arrSelect[i] = (rand() % 99) + 1;
		}
		else
		{
			arrHeap[i] = ((rand() % 99) + 1)*-1;
			arrSelect[i] = ((rand() % 99) + 1)*-1;
		}
	}


	if (arrSize < 101)
	{
		cout << "Initial Array  : ";
		printArray(arrHeap, len);
	}
	heapsort(arrHeap, len, heapCount);
	selectionSort(arrSelect, len, selectCount);

	if (arrSize < 101)
	{

		cout << "After Sorting  : ";
		printArray(arrHeap, len);
		cout << "\nSelection Sort : ";
		printArray(arrSelect, len);

	}
	cout << "Heap Swaps: " << heapCount;
	cout << endl << "Selection Swaps: " << selectCount;

	cout << "Pause";
	return 0;
}
